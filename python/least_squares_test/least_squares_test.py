# -*- coding: utf-8 -*-
"""Least Squares Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdVtkpE4n6Y2RP0YMucCtjKq3a7cKkTZ
"""

import random
import numpy as np

# How many training sets/samaples?
training_sets = 1000

rx_training = []
tx_training = []

rx_training_onechannel = []
tx_training_onechannel = []

rx_training_onechannel2 = []
tx_training_onechannel2 = []

for i in range(0, training_sets):
    tx_num = random.randint(0, 8)

    num_points = 10
    num_channel = 2

    channel1 = np.array([0.4, 0.1, 0.2, 0.0001, 0.00001, 0.2, 0.3, -0.4, -1.2, 0])
    channel2 = np.array([0.3, 0.12, 0.02, -1.2, 0, 2, 1.3, -0.00004, -1.0002, 0.001])

    rx1 = np.multiply(tx_num, channel1) + (np.random.randn(1, 10) * 1)
    rx2 = np.multiply(tx_num, channel2) + (np.random.randn(1, 10) * 1)

    # Training set - you get RX1, RX2 + tx_num

    received = np.vstack([rx1[0], rx2[0]])

    expected_output = np.array([[tx_num, tx_num], [tx_num, tx_num]])

    rx_training.append(received)
    tx_training.append(expected_output)

    rx_training_onechannel.append(rx1[0])
    tx_training_onechannel.append([tx_num] * len(rx1[0]))

    rx_training_onechannel2.append(rx2[0])
    tx_training_onechannel2.append([tx_num] * len(rx2[0]))

"""3-d? 2 channels"""

from numpy.linalg import lstsq

channel = lstsq(rx_training, tx_training)

for i in range(0, training_sets):
    print("RAW: %s = %s" % (str(tx_training[i]), str(rx_training[i])))

    output = np.matmul(rx_training[i], h)
    print("PROCESSED: %s = %s" % (str(tx_training[i][0]), str(output[0])))

# rx_training_onechannel

"""Following is single channel:"""

from numpy.linalg import lstsq

h = lstsq(rx_training_onechannel, tx_training_onechannel)[0]
h2 = lstsq(rx_training_onechannel2, tx_training_onechannel2)[0]

for i in range(0, training_sets):
    print("RAW: %s = %s" % (str(tx_training_onechannel[i]), str(rx_training_onechannel[i])))

    output = np.matmul(rx_training_onechannel[i], h)
    print("PROCESSED: %s = %s" % (str(tx_training_onechannel[i][0]), str(output[0])))

    output2 = np.matmul(rx_training_onechannel2[i], h2)
    print("PROCESSED2: %s = %s" % (str(tx_training_onechannel2[i][0]), str(output2[0])))

haver = (h + h2) / 2
print("H(average): %s" % (str(haver)))
# haver